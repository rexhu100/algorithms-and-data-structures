See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 72 warnings)

Correctness:  38/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 95.61%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Sep 13 17:54 BruteCollinearPoints.java
2.6K Sep 13 17:54 FastCollinearPoints.java
4.3K Sep 13 17:54 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At BruteCollinearPoints.java:[line 61]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'nPoints' is final and initialized to a compile-time constant. Should it also be static?  At BruteCollinearPoints.java:[line 6]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'nPoints' is final and initialized to a compile-time constant. Should it also be static?  At FastCollinearPoints.java:[line 6]


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:6: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
BruteCollinearPoints.java:43: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:6: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
Point.java:10: The private instance (or static) variable 'origin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:11:29: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:11:29: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:24:21: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:24:21: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:24:31: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:35:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:35:19: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:35:30: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:35:30: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:43:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] BruteCollinearPoints.java:44:19: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:44:19: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:55:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:55:19: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:55:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:55:24: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:56:49: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:56:49: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:73:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:73:19: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:73:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:73:24: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:11:19: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:11:19: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:21:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:21:19: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:21:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:21:24: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:22:49: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:22:49: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:34:18: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:34:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:42: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:42: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:40:22: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:40:22: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:40:32: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:40:32: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:41:25: '<' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 72 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    FastCollinearPoints.<init>(FastCollinearPoints.java:35)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:108)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.test6(TestFastCollinearPoints.java:331)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * filename = input2.txt
  * filename = input3.txt
==> FAILED

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
==> passed

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
  * 25-by-4 grid
==> passed

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 19/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                   62         
=> passed    32   0.00      107880           0         107880                  152         
=> passed    64   0.02     1906128           0        1906128                  379         
=> passed   128   0.13    32004000           0       32004000                  870         
=> passed   256   1.84   524377920           0      524377920                 1982         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                   72         
=> passed    32   0.00      107880           0         107880                  181         
=> passed    64   0.02     1906128           0        1906128                  426         
=> passed   128   0.15    32004000           0       32004000                  966         
=> passed   256   2.37   524377920           0      524377920                 2195         
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01       16000       17758          51516                  494         
=> passed   128   0.01       64768       83489         231746                 1120         
=> passed   256   0.03      260608      389196        1039000                 2510         
=> passed   512   0.17     1045504     1759242        4563988                 5506         
=> passed  1024   0.31     4188148     7993448       20175044                12042         
=> passed  2048   0.73    16764844    35389784       87544412                26104         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (87544412 / 20175044) = 2.12
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064        4764          17592                 5221         
=> passed   128   0.00       32512       17796          68104                18778         
=> passed   256   0.01      130560       68717         267994                70850         
=> passed   512   0.02      523264      269399        1062062               274061         
=> passed  1024   0.07     2095104     1065026        4225156              1075233         
=> passed  2048   0.19     8384512     4231214       16846940              4253498         
=> passed  4096   0.36    33546240    16859163       67264566             16907557         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67264566 / 16846940) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       12328       13806          39940                 4335         
=> passed   128   0.00       49576       49444         148464                14778         
=> passed   256   0.01      198824      186057         570938                51372         
=> passed   512   0.04      796328      709981        2216290               190672         
=> passed  1024   0.07     3187368     2753051        8693470               733361         
=> passed  2048   0.21    12753576    10799584       34352744              2871886         
=> passed  4096   0.82    51022504    42682082      136386668             11352280         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (136386668 / 34352744) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       12376       16785          45946                 4093         
=> passed   128   0.00       49824       65945         181714                16055         
=> passed   256   0.01      199856      246644         693144                58360         
=> passed   512   0.02      800528      949973        2700474               215397         
=> passed  1024   0.07     3204200     3696110       10596420               827027         
=> passed  2048   0.28    12820968    14514416       41849800              3239911         
=> passed  4096   1.15    51292120    57416412      166124944             12817136         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (166124944 / 41849800) = 1.99
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================

